(()=>{"use strict";var e,t=function(){function e(){}return Object.defineProperty(e.prototype,"benefits",{get:function(){return"A building for housing people."},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"maxOccupants",{get:function(){return 6},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){return[6,10]},enumerable:!1,configurable:!0}),e}();!function(e){e.labour="labour",e.wood="wood",e.stone="stone",e.sand="sand",e.metalOre="metalOre",e.metal="metal",e.tools="tools",e.food="food"}(e||(e={}));var n,r=(n=e,new Set(Object.keys(n).filter((function(e){return isNaN(Number(e))})))),o=Object.fromEntries(new Array(r.values()).map((function(e){return[e,0]}))),u=function(){function e(e){this.resourceMap=new Map(Object.entries(Object.assign(o,e)))}return e.prototype.set=function(e,t){var n=this.value(e);return this.resourceMap.set(e,t),n},e.prototype.value=function(e){return this.resourceMap.get(e)||0},e.prototype.add=function(t){var n=this,o={};return r.forEach((function(e){o[e]=n.value(e)+t.value(e)})),new e(o)},e.prototype.subtract=function(t){var n=this,o={};return r.forEach((function(e){o[e]=n.value(e)-t.value(e)})),new e(o)},e.prototype.compare=function(e){var t=e.subtract(this),n=0;for(var o in r){var u=t.value(o);if(u<0)return-1;u>0&&(n=1)}return n},e}(),i=function(){function e(){}return Object.defineProperty(e.prototype,"cost",{get:function(){return new u({wood:150})},enumerable:!1,configurable:!0}),e.prototype.canBuild=function(e){return 1==e.resource.compare(this.cost)},e.prototype.build=function(e){return this.canBuild(e)?(e.subtract(this.cost),new t):null},Object.defineProperty(e.prototype,"type",{get:function(){return"house"},enumerable:!1,configurable:!0}),e}(),s=new(function(){function e(e,t,n){this.buildings=e,this.people=t,this.storage=n}return e.prototype.constructBuilding=function(e){return!!e.canBuild(this.storage)&&(this.addBuilding(e),!0)},e.prototype.addBuilding=function(e){this.buildings.push(e.build(this.storage))},e}())([],[],new(function(){function t(e){this.resources=e}return t.prototype.add=function(e){this.resources=e.add(this.resources)},t.prototype.subtract=function(e){this.resources=e.subtract(this.resources)},t.prototype.resetLabour=function(){this.resources.set(e.labour,0)},Object.defineProperty(t.prototype,"resource",{get:function(){return this.resources},enumerable:!1,configurable:!0}),t}())(new u({wood:150})));s.constructBuilding(new i),console.log(s.buildings[0].benefits),console.log(s.buildings[0].maxOccupants),console.log(s.buildings[0].size)})();