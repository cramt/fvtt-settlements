(()=>{"use strict";var t,e=function(){function t(){}return Object.defineProperty(t.prototype,"benefits",{get:function(){return"A building for housing people."},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxOccupants",{get:function(){return 6},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return[6,10]},enumerable:!1,configurable:!0}),t}();!function(t){t.labour="labour",t.wood="wood",t.stone="stone",t.sand="sand",t.metalOre="metalOre",t.metal="metal",t.tools="tools",t.food="food"}(t||(t={}));var n=Object.keys(t).filter((function(t){return isNaN(Number(t))})),r=function(){function t(t){this.resourceMap=new Map(Object.entries(Object.assign(Object.fromEntries(n.map((function(t){return[t,0]}))),t)))}return t.prototype.set=function(t,e){this.resourceMap.set(t,e)},t.prototype.value=function(t){return this.resourceMap.get(t)||0},t.prototype.add=function(e){var r=this,o={};return n.forEach((function(t){o[t]=r.value(t)+e.value(t)})),new t(o)},t.prototype.subtract=function(e){var r=this,o={};return n.forEach((function(t){o[t]=r.value(t)-e.value(t)})),new t(o)},t.prototype.compare=function(t){var e=t.subtract(this),r=0;for(var o in n){var u=e.value(o);if(u<0)return-1;u>0&&(r=1)}return r},t}(),o=function(){function t(){}return Object.defineProperty(t.prototype,"cost",{get:function(){return new r({wood:150})},enumerable:!1,configurable:!0}),t.prototype.canBuild=function(t){return 1==t.resource.compare(this.cost)},t.prototype.build=function(t){return this.canBuild(t)?(t.subtract(this.cost),new e):null},Object.defineProperty(t.prototype,"type",{get:function(){return"house"},enumerable:!1,configurable:!0}),t}(),u=new(function(){function t(t,e,n){this.buildings=t,this.people=e,this.storage=n}return t.prototype.constructBuilding=function(t){return!!t.canBuild(this.storage)&&(this.addBuilding(t),!0)},t.prototype.addBuilding=function(t){this.buildings.push(t.build(this.storage))},t}())([],[],new(function(){function e(t){this.resources=t}return e.prototype.add=function(t){this.resources=t.add(this.resources)},e.prototype.subtract=function(t){this.resources=t.subtract(this.resources)},e.prototype.resetLabour=function(){this.resources.set(t.labour,0)},Object.defineProperty(e.prototype,"resource",{get:function(){return this.resources},enumerable:!1,configurable:!0}),e}())(new r({wood:150})));u.constructBuilding(new o),console.log(u.buildings[0].benefits),console.log(u.buildings[0].maxOccupants),console.log(u.buildings[0].size)})();